# -*- coding: utf-8 -*-
"""lab 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wqGK64P78ggu5XuGIe8stFYxRSUlfGJ-
"""



"""#Part 1"""

import pandas as pd

from google.colab import files

up = files.upload()

import random
import os

# our folder path containing some images
folder_path = './'
# the number of file to generate
num_files_desired = 10

# loop on all files of the folder and build a list of files paths
images = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
print(images)

import cv2

n=[]
v=[]
for i in images:
  print(i)
  im=cv2.imread(i)
  im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
  if 'n' in i :
    n.append(im)
  else:
    v.append(im)
  
print(len(n),len(v))

print(len(n))
l=[]
for i in n :
  l.append(i)
  image = cv2.flip( i, 0 )
  print(type(i))
  l.append(image)

print(len(v))
l1=[]
for i in n :
  l1.append(i)
  image = cv2.flip( i, 0 )
  print(type(i))
  l1.append(image)
print(len(l1))

flat =[]

for i in l:
  a=i
  a=a.flatten()
  flat.append(a)

for i in l1:
  a=i
  a=a.flatten()
  flat.append(a)
  
print(len(flat))

for i in flat:
  print(i)

import pandas as pd
import numpy as np

df = pd.DataFrame((flat))
df

Y = [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1]

Y = pd.DataFrame((Y))
Y

feature_cols = df.columns[1:-1]
X = df 
y = Y

import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn import metrics
from sklearn import preprocessing
from sklearn.metrics import accuracy_score



clf = DecisionTreeClassifier()
clf = clf.fit(X,y)

from sklearn import tree
tree.plot_tree(clf.fit(X,y))

X_test = df # Features
y_test = Y
y_predict = clf.predict(X_test)

print(accuracy_score(y_test, y_predict))



"""# Part 2"""

from google.colab import files

up = files.upload()

import random
import os

# our folder path containing some images
folder_path = './'
# the number of file to generate
num_files_desired = 10

# loop on all files of the folder and build a list of files paths
images = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
print(images)

import cv2

n=[]
v=[]
for i in images:
  print(i)
  im=cv2.imread(i)
  im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
  if 'n' in i :
    n.append(im)
  else:
    v.append(im)
  
print(len(n),len(v))

print(len(n))
l=[]
for i in n :
  l.append(i)
  image = cv2.flip( i, 0 )
  print(type(i))
  l.append(image)

print(len(v))
l1=[]
for i in n :
  l1.append(i)
  image = cv2.flip( i, 0 )
  print(type(i))
  l1.append(image)
print(len(l1))

flat =[]

for i in l:
  a=i
  a=a.flatten()
  flat.append(a)

for i in l1:
  a=i
  a=a.flatten()
  flat.append(a)
  
print(len(flat))

import pandas as pd
import numpy as np

df = pd.DataFrame((flat))
df

Y = [19,18,19,19,19,19,19,18,28,27,28,27,28,28,28,28]

Y = pd.DataFrame((Y))
Y

from sklearn import preprocessing

x = df.values #returns a numpy array
print(x)
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df = pd.DataFrame(x_scaled)
df

"""**Linear Regression**"""

import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df,Y, test_size=0.33, random_state=42)
print((X_train.shape))

import numpy as np
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

reg = LinearRegression(normalize=True).fit(X_train,y_train)
X_test
y_pred=reg.predict(X_test)
y_test
print(reg.score(X_test,y_test))
mean_squared_error(y_test, y_pred)

"""**Polynomial Regression**"""

import numpy as np
from sklearn.preprocessing import PolynomialFeatures


poly = PolynomialFeatures(degree=2)
X_ = poly.fit_transform(X_train)
predict_ = poly.fit_transform(X_test)

from sklearn import linear_model


clf = linear_model.LinearRegression()
clf.fit(X_, y_train)
print( clf.predict(predict_))

Mean_squared_error(y_test, clf.predict(predict_))



"""**CART Decision Tree**"""

from sklearn import tree

clf = tree.DecisionTreeRegressor()
clf = clf.fit(X_train, y_train)

tree.plot_tree(clf.fit(X_train, y_train))

y_pred = clf.predict(X_test)

clf.fit(X_train, y_train)

y_pred

from sklearn import metrics

print("Error:",metrics.mean_absolute_error(y_test, y_pred))

